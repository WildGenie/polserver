name: Build

on: [push, pull_request]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: "windows-latest"
            cxx-compiler: cl
            c-compiler: cl
            compiler-version: default
            build-type: Release
            nopch: 0

          - os: "ubuntu-latest"
            cxx-compiler: g++
            c-compiler: gcc
            compiler-version: 8
            build-type: RelWithDebInfo
            nopch: 0

          - os: "ubuntu-latest"
            cxx-compiler: clang++
            c-compiler: clang
            compiler-version: 8
            build-type: RelWithDebInfo
            nopch: 0

          - os: "ubuntu-latest"
            cxx-compiler: clang++
            c-compiler: clang
            compiler-version: 8
            build-type: Release
            nopch: 1

    runs-on: ${{ matrix.config.os }}

    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-python@v1
      - uses: seanmiddleditch/gha-setup-vsdevenv@master
      - name: Cache curl
        uses: actions/cache@v1
        with:
          path: lib/curl-7.57.0
          key: ${{ runner.os }}-${{ matrix.config.cxx-compiler }}-${{ matrix.config.compiler-version }}-curl-7.57.0

      - name: Install Compiler and Dependencies
        if: matrix.config.os == 'ubuntu-latest'
        shell: pwsh
        run: |
          sudo apt-get update

          $compiler = "${{ matrix.config.cxx-compiler }}"
          $version = "${{ matrix.config.compiler-version }}"

          if ($version -ne 'default') {
            sudo apt-get install "$compiler-$version" -y
            echo "$compiler-$version --version"
          }
          sudo apt-get install mysql-client libmysqlclient-dev kwstyle -y

          $ninja_version = "1.9.0"
          $cmake_version = "3.16.2"
          $cmake_archive = "cmake-$cmake_version-Linux-x86_64"
          wget -q "https://github.com/ninja-build/ninja/releases/download/v$ninja_version/ninja-linux.zip"
          unzip -q ninja-linux.zip -d bin-build
          wget -q "https://github.com/Kitware/CMake/releases/download/v$cmake_version/$cmake_archive.tar.gz"
          tar -xf "$cmake_archive.tar.gz"

          chmod +x bin-build/ninja
          chmod +x "$cmake_archive/bin/cmake"
          echo "$Env:GITHUB_WORKSPACE/bin-build" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "$Env:GITHUB_WORKSPACE/$cmake_archive/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Set CXX and CC
        shell: pwsh
        run: |
          $cxx_compiler = '${{ matrix.config.cxx-compiler }}'
          $c_compiler = '${{ matrix.config.c-compiler }}'
          $version = '${{ matrix.config.compiler-version }}'

          if ($version -ne 'default') {
            $cxx_compiler = "$cxx_compiler-$version"
            $c_compiler = "$c_compiler-$version"
          }
          echo "CXX=$cxx_compiler" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "CC=$c_compiler" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Config
        run: |
          cd bin-build
          cmake .. -G Ninja -DNO_PCH=${{ matrix.config.nopch }} -DCMAKE_BUILD_TYPE=${{ matrix.config.build-type }}
      - name: Build
        run: |
          cd bin-build
          cmake --build . --config ${{ matrix.config.build-type }} -- -j 2

      - name: Test
        if: matrix.config.nopch == 0
        run: |
          cd bin-build
          ctest -j2 --output-on-failure --repeat-until-fail 2 -C ${{ matrix.config.build-type }}
      - name: Stylecheck
        if: matrix.config.cxx-compiler == 'g++'
        run: |
          cd testsuite/style
          ./checknl.py -q
          ./checkstyle.py -q

      - name: Create Artefact
        if: matrix.config.nopch == 0
        run: |
          cd bin-build
          cmake --build . --config ${{ matrix.config.build-type }} --target package
          cd ../bin
          mkdir release
          mv *.zip release
      - name: Create Artefact (dbg)
        if: matrix.config.os == 'ubuntu-latest' && matrix.config.nopch == 0
        run: |
          cd bin-build
          cmake --build . --config ${{ matrix.config.build-type }} --target create_dbg_zip
          cd ../bin
          mv *.zip release

      - name: Upload Artefact
        if: matrix.config.nopch == 0
        uses: actions/upload-artifact@v1
        with:
          name: Nightly-${{ runner.os }}-${{ matrix.config.cxx-compiler }}
          path: bin/release

  notify_on_failure:
    needs: build
    runs-on: "ubuntu-latest"
    if: failure()
    steps:
      - name: Discord notification failure
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: turleypol/actions-status-discord@master
        with:
          status: failure
          job: Building
          nofail: false
  notify_on_success:
    needs: build
    runs-on: "ubuntu-latest"
    if: success()
    steps:
      - name: Discord notification success
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: turleypol/actions-status-discord@master
        with:
          status: success
          job: Building
          nofail: false
  notify_on_cancel:
    needs: build
    runs-on: "ubuntu-latest"
    if: cancelled()
    steps:
      - name: Discord notification cancelled
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: turleypol/actions-status-discord@master
        with:
          status: cancelled
          job: Building
          nofail: false
